#!/bin/bash

unalias jst 2> /dev/null
unset -f jst
function jst() {
    if [[ $(juju version) == "2."* ]]; then
        juju status --color "$@"
    else
        juju status --format=tabular
    fi
}

unalias jpt 2> /dev/null
unset -f jpt
function jpt() {
    if [[ $(juju version) == "2."* ]]; then
        watch -tcn0.5 -- juju status --color "$@"
    else
        watch -tcn0.5 -- juju status --format=tabular
    fi
}

unalias jr-a 2> /dev/null
unalias jr-s 2> /dev/null
unset -f jr-a
function jr-a() {
    if [[ $(juju version) == "2."* ]]; then
        juju remove-application "$@"
    else
        juju remove-service "$@"
    fi
}
alias jr-s='jr-a'

alias dhx='juju dhx'
alias jr-m='juju remove-machine'
alias ja-r='juju add-relation'
alias jr-r='juju remove-relation'
alias ja-u='juju add-unit'
alias jr-u='juju remove-unit'
alias jam='juju add-model --config test-mode=true --config automatically-retry-hooks=false --config logging-config="<root>=DEBUG"'
alias jscp='juju scp'

unalias jbs 2> /dev/null
unset -f jbs
function jbs() {
    juju bootstrap \
        --bootstrap-constraints "cores=2 mem=4GB" \
        --config test-mode=true \
        --config mongo-memory-profile=low \
        --model-default resource-tags=owner=johnsca \
        --model-default test-mode=true \
        --model-default automatically-retry-hooks=false \
        --model-default logging-config="<root>=DEBUG" \
        --model-default image-stream=daily \
        "$@"
}

function _jdm() {
    juju show-model "$1" | grep -q 'cloud: localhost'
    lxd=$?
    juju destroy-model --destroy-storage -y "$1"
    if (( $lxd )); then
        lxc profile delete juju-"$1"
    fi
}

unset -f jdm
function jdm() {
    if [[ "$@" == "" ]]; then
        _jdm "$(juju models --format=json | jq -r '."current-model"')"
    else
        for model in "$@"; do
            _jdm "$model"
        done
    fi
}

unset -f unit
function _unit() {
    unit=$1
    shift
    if [[ -z "$unit" ]]; then
        # nothing specified, take first errored unit, or no filter
        unit="$(juju status | grep '/.*error' | cut -f1 -d' ' | tr -d '*' | head -n1)"
    elif ! echo "$unit" | grep -q '[-/]'; then
        # application name specified; take first errored unit or first unit
        units="$(juju status $unit | grep '/[0-9]')"
        unit="$(echo "$units" | grep 'error')"
        if [[ -z "$unit" ]]; then
            unit="$(echo "$units" | head -n1)"
        fi
        unit="$(echo "$unit" | cut -f1 -d' ' | tr -d '*')"
    fi
    echo -n "$unit"
}

unset -f _filter
function _filter() {
    unit="$(_unit $1)"
    if [[ "$unit" == */* ]]; then
        unit="$(echo unit-$unit | tr '/' '-')"
    fi
    if [[ -n "$unit" ]]; then
        echo -n "-i $unit"
    fi
}

unset -f jssh
alias jssh='juju ssh'

unset -f jl
function jl() {
    if [[ -n "$1" && $1 != "-"* ]]; then
        set -- "-i" "$1" "${@:2}"
    fi
    if [[ $(juju version) == "2."* ]]; then
        color="--color"
    else
        color=""
    fi
    juju debug-log $color "$@"
}
unset -f jll
function jll() {
    if [[ -n "$1" && $1 != "-"* ]]; then
        set -- "-i" "$1" "${@:2}"
    fi
    if [[ $(juju version) == "2."* ]]; then
        color="--color"
    else
        color=""
    fi
    juju debug-log $color --replay "$@" | less -R +G -F
}

function jd() {
    if [[ -z "$CHARM_BUILD_DIR" ]]; then
        >&2 echo "CHARM_BUILD_DIR is not set"
        return 1
    elif [[ -z "$CBD" ]]; then
        CBD="$CHARM_BUILD_DIR"
    fi
    name=""
    charm="$1"
    shift
    if [[ "$charm" == "-n" ]]; then
        charm=""
        name="$1"
        shift
    fi
    if [[ -e layer.yaml ]]; then
        if [[ -z "$charm" ]]; then
            charm=$(yq read metadata.yaml name)
        fi
        if [[ "$charm" != *: && -e "$CBD/$charm" ]]; then
            charm_path="./$(realpath --relative-to . "$CBD/$charm")"
            >&2 echo "Deploying from $charm_path"
            charm="$charm_path"
        fi
    else
        >&2 echo "Deploying from ."
        charm=.
    fi
    juju deploy "$charm" $name "$@"
}

function ju() {
    if [[ -z "$CHARM_BUILD_DIR" ]]; then
        >&2 echo "CHARM_BUILD_DIR is not set"
        return 1
    elif [[ -z "$JR" ]]; then
        JR="$(dirname "$CHARM_BUILD_DIR")"
    fi
    charm="$1"
    shift
    if [[ -z "$charm" ]]; then
        charm=$(yq read metadata.yaml name)
    fi
    if [[ -e "$CBD/$charm" ]]; then
        charm_path="./$(realpath --relative-to . "$CBD/$charm")"
        >&2 echo "Upgrading from $charm_path"
    else
        >&2 echo "Unable to determine path for $charm"
        return
    fi
    juju upgrade-charm --force-units "$charm" --path "$charm_path" "$@"
}

function js() {
    juju switch "$@"
    ~/.devhelpers/juju-machine-count > ~/.cache/juju-machine-count
}

function jcc() {
    mkdir -p "$HOME/juju/envs/$1/"{charms,layers,interfaces,bundles,builds}
    jcs~ "$@"
}

function jcs() {
    export JR="$HOME/juju/envs/$1"
    export CHARM_LAYERS_DIR="$JR/layers"
    export CLD="$CHARM_LAYERS_DIR"
    export CHARM_INTERFACES_DIR="$JR/interfaces"
    export CID="$CHARM_INTERFACES_DIR"
    export CHARM_BUILD_DIR="$JR/builds"
    export CBD="$CHARM_BUILD_DIR"
    export CHARM_CHARMS_DIR="$JR/charms"
    export CCD="$CHARM_CHARMS_DIR"
    export CHARM_OVERLAYS_DIR="$JR/overlays"
    export COD="$CHARM_OVERLAYS_DIR"
    export CHARM_BUNDLES_DIR="$JR/bundles"
    export CBND="$CHARM_BUNDLES_DIR"
}


unset -f juju-current-model
function juju-current-model {
    if [[ -n "$JUJU_MODEL" ]]; then
        echo "$JUJU_MODEL"
    else
        controller="$(juju controllers --format=json | jq -r '.["current-controller"]')"
        if [[ -z "$controller" ]]; then
            echo "-:-"
        else
            model="$(juju controllers --format=json | jq -r ".controllers[\"$controller\"][\"current-model\"]" | sed -e 's:^.*/::')"
            if [[ "$model" == "null" ]]; then
                model="-"
            #    machines="?"
            #    units="?"
            #else
            #    status="$(timeout 0.5 juju models | grep '\*')"
            #    if [[ -n "$status" ]]; then
            #        machines="$(echo "$status" | awk '{print $5}')"
            #        units="$(echo "$status" | awk '{print $6}')"
            #    else
            #        machines="?"
            #        units="?"
            #    fi
            fi
            echo "$controller:$model"
        fi
    fi
}


unset -f jcs~
function jcs~() {
    jcs "$1"
    case "$2" in
        -i) cd $JR/interfaces;;
        -b) cd $JR/bundles;;
        -l) cd $JR/layers;;
         *) cd $JR/charms;;
     esac
}

unset -f jdest
function jdest() {
    if [[ $(juju version) == "2."* ]]; then
        controller=${1:-$(juju controllers --format=json | jq -r '."current-controller"')}
        juju destroy-controller --destroy-storage --destroy-all-models $controller
    else
        jenv=${1-$(juju switch)}
        juju destroy-environment -y $jenv "$@"
        ~/.devhelpers/juju-machine-count > ~/.juju/.machine-count &
    fi
}

function render-bundle() {
    bundle="${1:-bundle.yaml}"
    output="${2:-`echo $bundle | sed -e 's/.yaml$/.png/'`}"
    curl -d "$(cat $bundle)" http://svg.juju.solutions/?output=png > $output
}

unset -f jdo
function jdo {
    if [[ $(juju version) == "2."* ]]; then
        juju run-action --wait "$@"
    else
        action_id=`set -o pipefail; juju action do "$@" | cut -f2 -d:`
        if [[ $? == 0 ]]; then
            echo "Action ID: $action_id"
            juju action fetch --wait 0 $action_id
        fi
    fi
}

function jrun {
    if [[ $# == 1 ]]; then
        selector='--all'
    elif [[ "$1" == *'/'* ]]; then
        selector='--unit'
    else
        if [[ $(juju version) == "2."* ]]; then
            selector='--application'
        else
            selector='--service'
        fi
    fi
    juju run $selector "$@"
}

alias juju-secret='grep admin-secret ~/.juju/environments/`juju switch`.jenv | sed -e "s/  admin-secret: //"'

function pull-src {
    output=$(charm pull-source "$@")
    echo $output
    cd $(echo $output | cut -d' ' -f4)
    if git remote -v | egrep -q 'github.com/juju(-solutions)?'; then
        git remote set-url origin $(git remote -v | head -n1 | awk '{print $2}' | sed -e 's=https://github.com/=git@github.com:=')
    fi
}

# compare two charm store revisions to see if they're the same entity
function comp-rev {
    if [[ `charm show $1 hash` == `charm show $2 hash` ]]; then
        echo Match
    fi
}
